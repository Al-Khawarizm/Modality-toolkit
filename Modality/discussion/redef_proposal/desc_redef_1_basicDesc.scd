/*********

4 steps towards redefining .desc.scd files:

1. An example for a simple desc file (LPD8) with comments

2. the general info section in full detail

3. the entire elementsDesc in full detail

4. the single elementDesc in full detail

*********/

// 1. An example for a simple desc file (LPD8) with comments
// ------ snip here ----

/* AKAI LPD8 Laptop Pad controller */
// no support for pad cc mode because it use
// the same cc numbers then as the knobs...

(
deviceName: "LPD8", 			// user-readable name
protocol: \midi,				// one of MKtl.protocols of device
deviceType: \drumpad, 			// one of MKtl.deviceTypes
elementTypes: [\pad, \knob], 	// several of MKtl.elementTypes
status: "unknown",				// how complete and well tested?

// autogenerated when reading in a desc file:
// filename: "akai-lpd8", // the filename in some MKtDesc.folder
	// the full path to the file, e.g.
// filepath: "~/.../../akai-lpd8.desc.scd",

idInfo: "LPD8",		// tech info used to identify device

	// user-readable text info on the device,
	// can have entries ad-lib - these are recommended:
deviceInfo: (
	vendorURI: "http://www.akaipro.com/product/lpd8",
	manualURI: "http://www.akaipro.com/product/lpd8#downloads",
	description: "a basic drumpad controller", // one line text
	features: [
		"8 velocity-sensitive pads",
		"8 knobs",
		"4 mode-switching buttons"
	],
	notes: "use only recommended hardware mode XYZ.",
),

elementsDesc: (
	\kn: (
	//	groupName: \kn, // auto-generated from key above

		// properties that all elements in this group share:
		shared: (\elementType: \knob, \midiMsgType: \cc, \spec: \midiCC, \ioType: \inout, midiChan: 0),

		// the elements themselves:
		elements: (
			'1': (\midiNum: 1),
			'2': (\midiNum: 2),
			'3': (\midiNum: 3),
			'4': (\midiNum: 4),
			'5': (\midiNum: 5),
			'6': (\midiNum: 6),
			'7': (\midiNum: 7),
			'8': (\midiNum: 8)
		)
	),
	\pad: (
	//	groupName: \pad, // auto-generated from key above

		shared: (\elementType: \pad, \spec: \midiVel, \ioType: \inout),

		elements: (

			// a sublist of noteOn/offs - shared by both:
			shared: (\midiMsgType: \noteOn, \midiChan: 0),

			// element groups for noteOn, noteOff,
			// here generated algorithmically:
			elements: (
				\on: Event.newFrom( (36..43).collect { |note, i|
					[ (i+1).asSymbol, (\midiNum: note) ]
				}.flatten ),
				\off: Event.newFrom( (36..43).collect { |note, i|
					[ (i+1).asSymbol, (\midiNum: note) ]
				}.flatten )
			)
		)
	)
)
);

/*
// A small example how to make this MKtl,
// and how to play something with it.

MKtl.find; // find all MDIDI devices and list them
MKtl('lpd', "*lpd8"); // make an MKtl for LPD8.
MKtl('lpd').trace;

// make a gui for it
g = MKtl('lpd').gui;

// a synthdef
(
SynthDef(\test, {
	var sound = (SinOsc.ar( \freq.kr(400) ) * \amp.kr(1) ).clip;
	var env = EnvGen.ar(Env.adsr,\gate.kr(1));
	Out.ar(0, sound * env * 0.5)
}).add
)

// a little voicer that keeps running synths
(
~lpdSynths = ();
MKtl('lpd').elementAt(\pad, \on).do { |el, i|
	el.action_({ |v|
		~lpdSynths.at(i).release;
		~lpdSynths[i] =
			Synth(\test, [\amp, v.value*30, \freq, 400+(100*i)].postln)
	})
};

MKtl('lpd').elementAt(\pad, \off).do { |el,i|
	el.action_({ |v|
		~lpdSynths.removeAt(i).release;
	});
};

MKtl('lpd').elementAt(\kn).do { |knob, i|
	knob.action = { [knob.name, knob.value].postln };
};
)

*/