// tests for MKtlDesc:

/* TO DO - not fully working yet ******
// * creation from shortName not working yet:
MKtlDesc('nnky2');

// * not making the name correctly yet;
MKtlDesc.descFor("nanoKEY2");

// * if not there already, should find file and load
MKtlDesc.descFor(\nnky2);

// should find matching desc for autogenerated filename
MKtlDesc.descFor(<\nnky2*>);

// names should count up if already an instance there
**************/

/******* suggested use for now: **********/

MKtlDesc.loadDescs; // loads all descs from all folders
MKtlDesc.postLoaded;
MKtlDesc.at('nnkn2') // nanoKONTROL2

// or make one directly from filename - works
x = MKtlDesc.fromFile("nanoKEY2");

MKtlDesc.at('nnky2'); // access by shortname, always the same instance

x.dump;
x.fullDesc 		// the desc dict as from file
x.idInfo		// the name with which the system regoisters it
x.shortName		// autogenerated shortcut name for it
x.protocol		// the protocol(s) it uses
x.elementsDesc	// the description of all the elements it has

// class methods:
MKtlDesc.folderName.cs		// how its folder should be named
MKtlDesc.defaultFolder.cs	// the one that comes with modality
MKtlDesc.addFolder("~/scwork/").cs; // add your own
MKtlDesc.descFolders.cs;
MKtlDesc.openFolder(0);		// open them by index
MKtlDesc.openFolder(1);

MKtlDesc.loadDescs; // loads all descs from all folders
MKtlDesc.loadDescs("Steinberg*", 0); // match specific filename and folderIndex

MKtlDesc.postLoaded;


// shortNames
MKtlDesc.makeShortName("nanoKEY2");
// - how to handle identical ones?
// e.g. the three Steinberg devices
// - OSC info of this one creates this shortname...
MKtlDesc.at(\srcp3141731416127001).idInfo;
// - find a desc file by shortName!
// --- write index file that allows lookup

// how MKtlDesc finds description files
MKtlDesc.findFile("nano*");   // several filenames
MKtlDesc.findFile("nanoKEY2"); // single file
MKtlDesc.findDict("nano*");		// return the dict, either from all,

MKtlDesc.allDescs.keys.asArray.sort; // all names
MKtlDesc.findDict(\nnky2);	// maybe there already, should ev. make it then
MKtlDesc.findDict("nanoKEY2"); // get it from file
		// if it is already a dict, pass it through:
MKtlDesc.findDict((idInfo: \tralala, description: ()));

// make one from filename - works
x = MKtlDesc.fromFile("nanoKEY2");


// make a desc object for:
// * symbol -> shortname lookup,
// * string -> lookup file and load, or
// * dict -> make MKtlDesc for it
MKtlDesc.descFor("nano*"); // too many, so returns nil

