title:: MKtl description files
summary:: describes the file format for MKtl desc files
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MKtl, Tutorials/How_to_create_a_description_file

A description file contains information of a controller, especially access information for each of its elements.
Evaluation of the file should return a link::Classes/Dictionary:: of a well-defined structure. Description files are located at
code::
MKtl.openDescriptionFolder;
::

NOTE::
For a good overview on how a description file for your controller should look like, find a similar one that is alrady supported and look at its description file.
::

This document gives an overview on
list::
##link::#Filname convention::
##link::#Semantic information::
##link::#Identifier naming convention::
##link::#Syntax::
::

section:: Filname convention

The filename should be of the following format:

code::
<vendor>-<device_name>.desc.scd
::

where

list::
## code::<vendor>:: is lower-case name of vendor with spaces replaced by code::-::
## code::<device_name>:: is lower-case name of the device with spaces replaced by code::-::
::

section:: Semantic information

NOTE::
A description file is bound to one protocol. If there is a device that communicates on multiple protocols (e.g. EMPHASIS::icon iCONTROLS::), it has to be merged further down in the processing chain.
::

subsection:: Toplevel

DEFINITIONLIST::
## protocol [required]
|| The protocol used by the device
## idInfo | osx | linux [required]
|| For MIDI and HID: the device name as reported by the hardware or drivers. If the reported name is different in osx and linux then use the 'osx' and 'linux' dictionaries.
For OSC this needs to be a dictionary with information on the ipAdresses and ports used.

## description [required]
|| A dictionary describing the controls on the device. These controls are called elements within the Modality toolkit.

## deviceInfo [optional]
|| A dictionary giving additional information on the device.

## collectives [optional]
|| Specific groups that are needed to send or receive data from the device. In particular these can be used for OSC devices.

## status: [optional]
|| A string describing the status of this description, e.g. code::"complete; tested; OSX, Linux"::, code::"incomplete; tested; OSX", ::code::"complete; tested; OSX;"::, code::"incomplete; untested;"::

## deviceType [optional]
|| What kind of device it is. This will make it easier to find another device that might easily replace it. For example: code::\joystick::, code::\gamepad::, code::\mouse::.

## specs [optional]
|| A dictionary with serialized specs like code::(\key: [0, 144, \lin])::. These overwrite existing definition locally for this description only.

::


subsection:: In the description of an element

A control element is a part of a controller that does one or more of the following things

list::
## spits out a one-dimensional stream of events,
## accepts a one-dimensional stream of events.
::

DEFINITIONLIST::

## midiMsgType
|| code::midiMsgType:: has to be present for elements belonging to a MIDI device.

## hidEelmentID | <hidUsage|hidUsagePage>
|| code::hidElementID:: or both code::hidUsage:: and code::hidUsagePage:: have to be present for elements belonging to an HID device.

## oscPath
|| code::oscPath:: has to be present for elements belonging to an OSC device, or it has to use code::ioType: \groupIn:: or code::ioType: \groupOut::

##  spec
|| The element code::\spec:: has to be present and is a symbol that, if called code::.asSpec:: upon, returns the (global) code::ControlSpec:: suitable for this element.
## \midiChan, \midiNum
|| Needed, if code::\midiType:: is part of the config string. The identifiers code::\bend, \touch, \program:: only need code::\midiChan:: to be specified.
::

	The 'description' field contains a dictionary that can contain other dictionaries or arrays. At the leaves of this data structure must be a dictionary describing an element. An example:

	code::
\key: [
	[
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
	],[
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
	]
]
::


	The 'specs' field contains a dictionary of specifications of controller ranges. An example:

code::
(
	\shaper:  [0, 128, \lin],
	\mover:   [1, 4096, \exp]
)
::

subsection:: deviceInfo

The deviceInfo is of the following form. All entries are optional.

code::
(
...
deviceInfo: (
    vendorURI: "http://vendor/product",
    manualURI: "http://manual.pdf",
    description: "Short sentence on what a great controller this is.",
    features: [
        "23 colorblinding pads",
        "42 invisible sliders",
    ],
    notes: "Make sure the device is in total-recall mode!",
    type: [\pad, \slider],
    hasScribble: false // see e.g. ableton push for a device that has one
),
description: ...
)
::

Examples for code::type:: are

list::
## code::pad::
## code::knob::
## code::encoder::
## code::mixer::
## code::fader::
## code::gamepad::
## code::joystick::
## code::pointer::
## code::keyboard::
::

Note that they are always written in singular.

section:: Identifier naming convention

Naming conventions for identifiers are:
list::
## code::kn:: for knobs,
## code::sl:: for sliders,
## code::bt:: for buttons,
## code::key:: for keys,
## code::pad:: for pads, etc. Elements with names or symbols on them should have that name, e.g. a play button should be called \play, a rewind button \rew, etc.
::

Naming conventions for type values are:
list::
## code::slider:: for sliders,
## code::knob:: for knobs,
## code::button:: for buttons,
## code::key:: for keys,
## code::pad:: for pads
## code::oscMessage:: for osc-messages (of collectives)
::

note::
The description file for the "Korg nanoKONTROL 2"
code::
Korg_nanoKONTROL2.desc.scd
::
is a good example for element naming. All naming examples are taken from there.
::


Generally, element names should be as clear as possible, and reasonably short to allow for compact code. The main advantage of following the conventions is that similar elements across devices will have identical or at least simlar names, and thus allow substituting one device for a similar one with minimal code changes.

	Unnamed buttons should be called \bt, sliders \sl, knobs \kn, pads \pad, etc., and when they are physically in arrays, they should be given as, e.g.
code::
 \kn: (16..23).collect{ |i|
		(\midiMsgType: \cc, \type: \knob, \midiChan: 0, \midiNum: i, \spec: \midiCC)
	}.
::
	When in rows and columns, these can be nested:
code::
	\bt: [(32..39),(48..55),(64..71)].collect{ |xs|
		xs.collect{ |i|
			(\midiMsgType: \cc, \type: \button, \midiChan: 0, \midiNum:  i, \spec: \midiCC)
		}
	}
::
	Elements with names or symbols on them should be given that name,
	e.g.  a button name "play" or with a > sign on it  should be
	called \play or \playBt. in the nanoKontrol 2 file, such button names include transport buttons \rew, \fwd, \stop, \play, \rec,
	\cycle, track buttons \tleft, \tright, and marker buttons \mset, \mleft, \mright.

	When in doubt, consult files of devices with similar elements, and follow the naming schemes there.

section:: Syntax

The syntax for the description file as agreed on by the modalityTeam on April, 7th 2014
described in Augmented Backusâ€“Naur Form (with code::/:: switched to code::|:: ) (see link::https://en.wikipedia.org/wiki/ABNF::).

NOTE::For an example for the description file syntax, see link::Tutorials/How_to_create_a_description_file::.::

NOTE::
The actual description files used by Modality often don't conform to this syntax because they use SuperCollider code to algorithmically generate the dictionary. In any case calling code::.asCompileString:: on the dictionary should generate a string which conforms to the syntax above.
::

TELETYPE::
descFile                    = "( protocol: " protocol ", device: " string ", description:" description [", infoMessage:" string] ")"
    protocol                = "\hid" | "\midi"
    idInfo                  = ("idInfo :" string) | ("osx : (idInfo: "string ") " [", linux: (idInfo: "string ")" ] ) | ("linux: (idInfo: "string ") " [", osx: (idInfo:" string ")" ] )
    description             = hidDict | midiDict
	collectives             = hidDict | midiDict
    midiDict                = "(" symbol ":" midiNode [", " *(symbol ":" midiNode) ] ")"
        midiArray           = "[" midiNode [", " *midiNode ] "]"
        midiNode            = midiDict | midiArray | midiElem
    hidDict                 = "(" symbol ":" hidNode [", " *(symbol ":" hidNode) ] ")"
        hidArray            = "[" hidNode [", " *hidNode ] "]"
        hidNode             = hidDict | hidArray | hidElem
midiElem                    = midiElemFull | midiElemOnlyChan
    midiElemFull            = "( midiMsgType:" midiMsgTypeFull ", midiChan:" int ", midiNum:" int ", spec:" symbol ", type:" type [", ioType:" ioType] [", mode:" mode] ")"
        midiMsgTypeFull     = "\noteOnOff" | "\noteOn" | "\noteOff" | "\cc" | "\polytouch"
    midiElemOnlyChan        = "( midiMsgType:" midiMsgTypeOnlyChan ", midiChan:" int ", spec:" symbol ", type:" type [", ioType:" ioType] [", mode:" mode] ")"
        midiMsgTypeOnlyChan = "\bend" | "\touch"  | "\program"
hidElem                     = "( \hidUsage:" int ", \hidUsagePage: " int ", spec:" symbol ", type:" type [", ioType:" ioType] [", mode:" mode] ")"
    type                    = "\knob" | "\button" | "\key" | "\slider" | "\chantouch" | "\polytouch" | "\joyaxis" | "\hatswitch" | "\encoder" | "\pad"
    mode                    = "\one-shot" | "\push" | "\minimum" | "\center" | "\toggle"
    ioType                  = "\in" | "\out" | "\inout"

int                         = digitFromOne *digitFromZero
    digitFromZero           = "0" | digitFromOne
        digitFromOne        = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
string                      = "\"" *char "\""
char                        = %x01-7F

::
