title:: MKtl description files
summary:: describes the file format for MKtl desc files
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MKtl, Tutorials/How_to_create_a_description_file

Section:: Introduction
As agreed on by the modalityTeam on November, 9th 2013.

A controller is always bound to one protocol. If there is a device that communicates on multiple protocols (e.g. EMPHASIS::ICON i-controls::), this has to be merged later in the processing chain.
A control element is a part of a controller that does one or more of the following things

list::
## spits out a one-dimensional stream of events,
## accepts a one-dimensional stream of events.
::


A description file gathers information for each element.
One description file line is a combination of
EMPHASIS::(a):: semantic information (e.g. for searching or automated grouping) and
EMPHASIS::(b):: technical information (mainly for MKtl-internal usage).

It is of this form:
code::
\key: (\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
::

Elements can be hierarchically grouped:

code::
\key: [
	[
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
	],[
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
		(\infoKey1: infoVal1, \infoKey2: infoVal2, ...),
	]
]
::


subsection:: Semantic information

STRONG::type::

tells about the type of an element. Known types are
LIST::
## button
## knob
## joyAxis
## hatSwitch
## key
## pad
## slider
::
Others can be used as well, and will be represented in the gui and everywhere else by fallback objects.

STRONG::mode::

optional extension to type, e.g.

LIST::
## one-shot
## push
## etc.
::

subsection::Technical information

DEFINITIONLIST::
## <midi|hid|osc>Type
|| One of code::[ \midiMsgType, \hidElementID, \oscType ]:: has to be present. This also tells about the type of device on which it is implemented (MIDI/HID/OSC).
## \midiMsgType
|| code::\noteOnOff | \noteOn | \noteOff | \bend | \cc | \touch | \polytouch | \program::
## \hidElementID
|| key usage. *We have to agree on this. possibly taking from the HID whitepaper?*
##  \oscType
|| *tbd. We have to agree on this.*
##  \spec
|| The element code::\spec:: has to be present and is a symbol that, if called code::.asSpec:: upon, returns the (global) code::ControlSpec:: suitable for this element.
## \midiChan, \midiNum
|| Needed, if code::\midiType:: is part of the config string. The identifiers code::\midiBend, \midiTouch, \midiProgram:: only need code::\midiChan:: to be specified.
::

