title:: Dispatch Templates
categories:: Modality
related:: Classes/MDispatch, Classes/MDispatchOut
summary:: Examples for the several templates available for MDispatch

paged:
code::
//paged launchpad
(
~paged = MDispatch.make(\paged,MKtl('lnch0'),\left,\right,32);
~paged.verbose = true
)
~paged.remove

//paged nanoKontrol
(
MKtl('nnkn0').reset;
~paged = MDispatch.make(\paged,MKtl('nnkn0'),\rew,\fwd);
~paged.verbose = true
)
::

velocity
code::
(
MKtl('nnkn0') .reset;
~dis = MDispatch.make(\velocity, MKtl('nnkn0') );
~dis.verbose = true;
)
~dis.insp

(
w = Window.new.front;
~sl = Slider(w, Rect(20, 60, 150, 20));

Ndef(\y,{ |freq= 400, mod = 1| Saw.ar( Lag.kr(freq,1)+200 ) * SinOsc.ar(Lag.kr(mod,1) ).range(0.0,1.0)* 0.5 }).play

~dis.addFuncElem(\sl1_1,\blah,{¬†|elem| { ~sl.value_(elem.value/10) }.defer; Ndef(\y).set(\freq,elem.value*300)  });
~dis.addFuncElem(\sl2_1,\blah,{ |elem|  Ndef(\y).set(\mod, elem.value *5 )  }))

::


paged velocity
code::
(
MKtl('nnkn0').reset;
~dis1 = MDispatch.make(\paged, MKtl('nnkn0'),\rew,\fwd,4);
~dis2 = MDispatch.make(\velocity, ~dis1);
~dis2.verbose = true
)
~dis2.recursiveRemove
::


merge
Make sliders output velocity but keep the rest of controls absolute and merge into just one controller.
code::
(
k = MKtl('nnkn0');
k.reset;
~sliders =  MDispatch.make(\velocity,k, k.elementsOfType(\slider).collect(_.name) );

~restOfElems = k.elements.select{ |elem|
	elem.deviceDescription[\type] != \slider
}.collect(_.name);

~result = MDispatch.make(\merge,[[~sliders,nil],[k,~restOfElems]]);
~result.verbose = true;
~sliders.verbose = true;
)
~result.remove // only removes the merge dispatch
~result.recursiveRemove // removes all dispatchs going down the chain
::


trigger
code::
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\trigger, MKtl('nnkn0') );
~disp.verbose = true;
)
~disp.remove
MKtl('nnkn0').verbose = false
::


multipleClick
code::
(
MKtl('nnkn0').reset;
~disp  =  MDispatch.make(\multipleClick,MKtl('nnkn0'));
~disp .verbose = true;
)
~disp .insp
~disp .remove
::

thresh
code::
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\threshold, MKtl('nnkn0'), thresh: 0.5 );
~disp.verbose = true;
)
~disp.remove
::


thresholdUp
code::
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\thresholdUp, MKtl('nnkn0'), thresh: 0.5 );
~disp.verbose = true;
)
~disp.remove
::

thresholdDown
code::
// thresh down
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\thresholdDown, MKtl('nnkn0'), thresh: 0.5 );
~disp.verbose = true;
)
~disp.remove
::


threshZones
code::
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\threshZones, MKtl('nnkn0'), nil, nil, [0.2,0.5,0.8] );
~disp.verbose = true;
)
~disp.remove


9.do{ |i|
	3.do{ |j|
		var r = rrand(300,3000);
		~disp.addToOutput(("sl"++i++"_1_"++j).asSymbol, \sound,{ { FreeVerb.ar(0.1*SinOsc.ar(r) * EnvGen.ar(Env.perc, doneAction:2),0.5,0.9) }.play });
	}
}
::

up
code::
(
MKtl('nnkn0').reset;
~disp =  MDispatch.make(\up, MKtl('nnkn0') );
~disp.verbose = true;
)
~disp.remove
::

down
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\down, k);
~disp.verbose = true;
)
::

inRange
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\inRange, k, nil, nil, [0.5,1.0]);
~disp.verbose = true;
)
::

match
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\match, k, nil, nil, [0.0,1.0]);
~disp.verbose = true;
)
::

change
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\change, k, nil, nil, [0.0,1.0]);
~disp.verbose = true;
)
~disp.remove
::

changeDirection
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\changeDirection, k, nil, nil, [0.0,1.0]);
~disp.verbose = true;
)
~disp.remove
::

wait
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\wait, k, nil, nil, 0.1);
~disp.verbose = true;
)
::

within - only if values come in within n seconds of each other.
code::
(
k = MKtl('nnkn0').reset;
~trigger = MDispatch.make(\trigger,k);
~disp =  MDispatch.make(\within, ~trigger, nil, nil, 0.5);
~disp.verbose = true;
)
::

delay - only if values come in within n seconds of each other.
code::
(
k = MKtl('nnkn0').reset;
~disp =  MDispatch.make(\delay, k, nil, nil, 1);
~disp.verbose = true;
)

~disp.remove
::