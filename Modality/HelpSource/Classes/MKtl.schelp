CLASS:: MKtl
summary:: A class for creating and accessing external controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtlDesc, Classes/MKtlDevice, Classes/MKtlElementGroup, Classes/MKtlElement

DESCRIPTION::

NOTE::
For a guided tour, start reading at link::Overviews/Modality::.
::

MKtl provides an easy to use interface for devices you can connect to your computer through MIDI, HID, OSC, Serial and eventually other protocols. Beyond that, you will be able to use it for GUI based controllers (yet to be implemented).

MKtl searches for controllers connected to your machine, and gives you a list of available devices. Or, if you already know which controller you want to use, it will look through this list and returns the controller with that name. If it cannot find it, it will replace it with a graphical representation of the controller to simulate it.

For most devices, this requires that someone has made a description file for the device; if there is none, it is easy to make one following the instructions here:
link::Tutorials/How_to_create_a_description_file::

MKtls can also be nested by composing several MKtls; for instance, the iControl ... creates both MIDI and HID devices for communication. For an example and background, see link::Tutorials/Composing_MKtls::


CLASSMETHODS::
PRIVATE:: initClass, prAddDefaultSpecs

METHOD:: all
all available MKtl controllers.
code::
MKtl.all;
::


METHOD:: find
Find all currently connected controllers.
This method calls the find method on all of MKtlDevice's subclasses, and will post a list of available MKtl devices.
code::
MKtl.find;
::



METHOD:: new
Accesses an existing instance of MKtl with the given name, or creates a new instance with that name. As with e.g. JITLib proxies like Ndef, Tdef, Pdef, or OSCdef, MIDIdef etc.

argument:: name
The name of the controller as you want to refer to it.

argument:: desc
The device description that you want to use. This is the file name of the description file (without .desc.scd), an MKtlDesc object, or a dictionary from which a valid device description can be created.

argument:: lookForNew
Boolean flag whether or not to look for newly attached devices or newly added device descriptions. Default is false. It will always look for devices and device descriptions the first time you open an MKtl.

code::
// name and name of description file
k = MKtl('mynano2', "korg-nanokontrol2");

// a longer example passing in a dictionary is below
::

SUBSECTION:: Using specs in MKtl

METHOD:: globalSpecs
A class dictionary of all preset ControlSpecs used by various controller elements.

METHOD:: addSpec, getSpec
add and access by name a ControlSpec in MKtl's dictionary of specs

argument:: key
the name by which to store the spec

argument:: spec
The ControlSpec or a symbol or array that can be converted to a spec.
code::
MKtl.globalSpecs;
MKtl.addSpec(\bipolar, [-1, 1]);
MKtl.getSpec(\bipolar);
::


SUBSECTION:: Using description files, interfacing to MKtlDesc

METHOD:: postLoadableDescs
post the filenames of all loadable device descriptions.
For more details on using description files, see link::Classes/MKtlDesc::

METHOD:: postLoadedDescs
post all currently loaded device descriptions.

METHOD:: descFolders
the folder(s) where MKtlDesc finds description files.

METHOD:: openDescFolder
open folder(s) at index containing description files.

METHOD:: loadDescsMatching
load device description file(s) matching with name from indicated folder(s).

Method:: descIsFaulty
test whether the given desc is faulty.

code::
MKtl.postLoadableDescs;
MKtl.postLoadedDescs;
MKtl.descFolders;
MKtl.openDescFolder(0);
MKtl.loadDescsMatching("*run-n-drive*");

::

INSTANCEMETHODS::

METHOD:: name
get and set the name of the MKtl.
This also changes the name under which the MKtl is stored in Mktl.all.
code::
MKtl(\test, "korg-nanokontrol2");
MKtl(\test).name_(\mynano2);
MKtl.all; // \test is gone
::

METHOD:: gui
Create a gui representation of the device
code::
MKtl(\mynano2).gui;
::


METHOD:: specs, addSpec, getSpec
a local dict for special specs to use with this MKtl's elements or groups.
code::
MKtl(\mynano2).specs;
MKtl(\mynano2).addSpec(\angle, [-pi, pi]);
MKtl(\mynano2).getSpec(\angle);
::

METHOD:: desc
the MKtlDesc object that holds the device information from the description file.
It is used to build the elements and groups of this MKtl.
code::
a = MKtl(\test).desc;
a.fullDesc;		// a dict built from the description file
a.fullDesc.keys;	// the keys of the items in it
a.protocol;			// e.g. the protocol used
a.elementsDesc; 	// the dict of the elements described
a.postElements; 	// post element names and keys/indices in hierarchical order
::
For more, see MKtlDesc


METHOD:: openDevice
Open the hardware device for this MKtl if it was not opened already. It will look automatically for an appropriate device.

argument:: lookAgain
Whether or not to look for newly attached hardware devices.

code::
// while the run'n'drive is not yet attached,
// this creates a virtual device
m = MKtl( 'funky', "*run-n-drive" );

// now I found my run'n'drive and plugged it in:
m.openDevice; // finds it automatically

::

METHOD:: closeDevice
Closes the hardware device if it was open.

METHOD:: mktlDevice
The instance of MKtlDevice that this MKtl uses.

METHOD:: free
Frees the MKtl again and forgets about its existence.
If there was an mktlDevice, closes it.

METHOD:: reset
Reset all actions of the elements in this MKtl to nil.
(should this include the group actions?)

METHOD:: trace
set flag whether incoming data are posted or not.

METHOD:: traceRunning
Whether or not we are printing incoming data currently.


METHOD::rebuild
If new description given is valid, this will rebuild the elements from the new description.
warning:: This will remove any actions you have attached, so only use this method when you are really sure that you want to replace the device description.::

SUBSECTION:: Elements of the MKtl

METHOD:: elementNames, printElementNames
A hierarchical list of the elementNames used, which can be pretty printed.

METHOD:: elements
all control elements (MKtlElement) on the device you may want to listen or talk to. this returns an link::Classes/MKtlElementGroup:: containing a hierarchical tree of link::Classes/MKtlElement::s, organised via link::Classes/MKtlElementGroup::.
code::
MKtl(\funky).elements;
::

METHOD:: elementsDict
all elements in one flat event so they can be accessed very fast.
MKtl(\funky).elementsDict;

METHOD:: inputElements, outputElements
code::
// collect all elements that have inputs:
m.inputElements
//  all elements that have outputs:
m.outputElements
::

METHOD:: elementsOfType, elementsNotOfType
return all elements that are of the type given, or not
code::
MKtl(\mynano2).elementsOfType(\slider);
k.elementsNotOfType(\slider);
::

METHOD:: elementsLabeled
return all elements which have been given a label
code::
o = MKtl(\opi1, "teenage*");
o.elementsLabeled(\white);
::


METHOD:: elementAt
Access an element in the elements hierarchy by passing in the indexes to arrays/dictionaries as arguments of elementAt:

code::
MKtl(\mynano2).elements
MKtl(\mynano2).elementAt(\sl,0);
//the same as
MKtl(\mynano2).elements[\sl][0];
::

METHOD:: at
Access an element in the elements hierarchy by passing in one index.
code:: MKtl(\funky).at(0); ::

argument:: index
Index to get from the elements.

METHOD:: valueAt
Access an element's value by the element key

code::
m = MKtl( 'funky', "*run-n-drive" );
m.valueAt( \compass );
m.valueAt( \bt_2 );

::

METHOD:: deviceValueAt
Access an element's deviceValue (in the deviceSpec range) by the element key

code::
m = MKtl( 'funky', "*run-n-drive" );
m.deviceValueAt( \compass );
m.deviceValueAt( \bt_2 );
::


METHOD:: setValueAt, setDeviceValueAt
Set an element's value or deviceValue by element key

METHOD:: send
Send the value of the element to the hardware device; called if you set the value of an MKtlElement that is an output.

SUBSECTION:: Exploration of a device

See link::Tutorials/How_to_create_a_description_file:: for a full discussion on this.

METHOD:: explore

When a device doesn't have a description file yet, explore can be used to help in creating one.

METHOD:: exploring
Returns a Boolean whether or not a device is currently being explored.

METHOD:: createDescriptionFile
When a device doesn't have a description file yet, this method can be used to create a description file.

PRIVATE:: storeArgs, printOn, init, makeElements
