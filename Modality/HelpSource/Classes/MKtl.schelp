CLASS:: MKtl
summary:: The class to use external controllers
categories:: Control, MIDI, HID
related:: Classes/Dispatch, Classes/Pktl, Reference/UsingMKtlAndDispatch

DESCRIPTION::
MKtl gives an easy to use interface for devices you can connect to your computer through MIDI, HID, OSC, Serial and other protocols. Even more, you can also use it for GUI based controllers.
MKtl searches for controllers connected to your machine, and gives you a list of available devices. Or, if you already know which controller you want to use, it will look through this list and give you the controller you want to use. If it cannot find it, it will replace it with a graphical representation of the controller to simulate it.

CLASSMETHODS::

METHOD:: all
all open MKtl controllers.

returns::

METHOD:: find
Find all currently connected controllers.
This method calls the find method on all of MKtl's subclasses.

returns::

METHOD:: addSpec
add a ControlSpec to MKtl's library of specs.

argument:: key
Name of the spec

argument:: spec
The ControlSpec

returns::


METHOD:: new
(describe method here)

argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the new method will return that instance (a la Ndef proxy style).

argument:: deviceDescName
The device description that you want to use. This is the name used in the device description index, or the long name of the device as reported.

returns:: a new instance of MKtl.


METHOD:: loadDeviceIndex
This method loads the device index file. If the device index was already loaded, it will only reload the device index if reload is true. Normally this method is only used internally, but if you updated the device index file manually you may want to call this method manually.

argument:: reload
force a reload of the device index


METHOD:: postAllDescriptions
Posts all descriptions found in the deviceDescriptionFolder.



INSTANCEMETHODS::

METHOD:: name
retrieve the name of the MKtl.

METHOD:: deviceDescription
The device description of the MKtl.

METHOD:: elements
all control elements (MKtlElement) on the device you may want to listen or talk to

PRIVATE:: init
Initializes the MKtl with its name, elements and puts it in all.

argument:: argName
name of the MKtl

argument:: deviceDescName
deviceDescName of the MKtl



METHOD:: loadDeviceDescription
Load a device description from either a given device description name, or a device name.
Also creates the specs for them.

argument:: deviceName
a given device description name, or a device name.


PRIVATE:: deviceDescriptionFor
Find a description for a specific element.

argument:: elname
Name of the element.

returns:: the description of the element.

METHOD:: postDeviceDescription
pretty print the device description.


PRIVATE:: makeElements
Populate the elements with MKtlElements.


METHOD:: defaultValueFor
Get the default value for a specific element

argument:: elName
Name of the element

returns:: the default value

METHOD:: elementNames
get all the names for the elements.

returns:: list with element names


METHOD:: elementsOfType
get all elements of a specific type

argument:: type
type (e.g. button, slider)

returns:: list with MKtlElements

METHOD:: at
get elements with the given names

argument:: elName
single element name or a collection of element names

returns:: the MKtlElements asked for.

METHOD:: valueAt
Get the values of the given elements.

argument:: elName
single element name or a collection of element names

returns:: the values asked for

METHOD:: setValueAt
Set the values of the given elements.

argument:: elName
single element name or a collection of element names

argument:: val
value(s) for the elements

METHOD:: addFunc
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

argument:: function
(describe argument here)

argument:: addAction
(describe argument here)

argument:: otherName
(describe argument here)

returns:: (returnvalue)

METHOD:: addFuncAfter
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

argument:: function
(describe argument here)

argument:: otherName
(describe argument here)

returns:: (returnvalue)

METHOD:: addFuncBefore
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

argument:: function
(describe argument here)

argument:: otherName
(describe argument here)

returns:: (returnvalue)

METHOD:: removeFunc
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

returns:: (returnvalue)

METHOD:: addToOutput
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

argument:: function
(describe argument here)

argument:: addAction
(describe argument here)

argument:: otherName
(describe argument here)

returns:: (returnvalue)

METHOD:: removeFromOutput
(describe method here)

argument:: elementKey
(describe argument here)

argument:: funcName
(describe argument here)

returns:: (returnvalue)

METHOD:: reset
(describe method here)

returns:: (returnvalue)

METHOD:: recordValue
(describe method here)

argument:: key
(describe argument here)

argument:: value
(describe argument here)

returns:: (returnvalue)

METHOD:: receive
(describe method here)

argument:: key
(describe argument here)

argument:: val
(describe argument here)

returns:: (returnvalue)

METHOD:: send
(describe method here)

argument:: key
(describe argument here)

argument:: val
(describe argument here)

returns:: (returnvalue)


EXAMPLES::

code::
(some example code)
::

SUBSECTION:: Private methods
The following methods are used internally.

CLASSMETHODS::

PRIVATE:: initClass

METHOD:: deviceDescriptionFolder
This class variable holds the path where the device descriptions are located. It is automatically inferred from the location where the class is residing on your system.

returns::

METHOD:: allDevDescs
An IdentityDictionary holding all known device specs. These are read from a file in deviceDescriptionFolder +/+ "index.desc.scd".

returns::

METHOD:: specs
All the ControlSpecs used by controller elements.

returns::

METHOD:: allAvailable
List of available controllers (by name) per protocol.

returns:: 

METHOD:: makeShortName
Convenience method to make a short name from a long name given by the controller.

argument:: deviceID
The long name given by the controller.

returns:: the short name

METHOD:: basicNew
This is the basic method to create a new MKtl, which is called by the subclasses to do the basic initialisation of the MKtl.

argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the new method will return that instance (a la Ndef proxy style).

argument:: deviceDescName
The device description that you want to use. This is the name used in the device description index, or the long name of the device as reported.

returns:: the instance of MKtl that is created.

METHOD:: checkName
Checks whether you are trying to make a new instance of MKtl with a specific deviceDescName with a name that is already in use.

argument:: name
The name of the controller as you want to refer to it.

argument:: deviceDescName
The device description that you want to use.

returns:: true if the name is already taken, false if the name is not taken, or if you did not specify a deviceDescName

METHOD:: getDeviceDescription
Try to find a fitting device description.

argument:: Name of the device description, or name of the controller name given.

returns:: a device description.

METHOD:: flattenDescription
flattens a device description based on which platform the code is currently running.

argument:: devDesc
The description to flatten

returns:: the flattened description.


INSTANCE METHODS::

PRIVATE:: storeArgs, printOn

