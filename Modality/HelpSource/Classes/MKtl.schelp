CLASS:: MKtl
summary:: The class to use external controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MDispatch, Classes/PKtl

DESCRIPTION::
MKtl gives an easy to use interface for devices you can connect to your computer through MIDI, HID, OSC, Serial and other protocols. Even more, you can also use it for GUI based controllers (yet to be implemented).
MKtl searches for controllers connected to your machine, and gives you a list of available devices. Or, if you already know which controller you want to use, it will look through this list and returns you the controller with that name. If it cannot find it, it will replace it with a graphical representation of the controller to simulate it.

CLASSMETHODS::

METHOD:: all
all open MKtl controllers.

METHOD:: find
Find all currently connected controllers.
This method calls the find method on all of MKtl's subclasses.

METHOD:: new
Creates a new instance of MKtl

argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the new method will return that instance (a la Ndef proxy style).

argument:: deviceDescName
The device description that you want to use. This is the file name of the description file (without .desc.scd), or the long name of the device as reported.


METHOD:: addSpec
add a ControlSpec to MKtl's library of specs.

argument:: key
Name of the spec

argument:: spec
The ControlSpec

METHOD:: make
Create a new MKtl using a device description without initializing it. Usefull for testing a controller when it is not connected to the system

argument:: name
name for the new MKtl

argument:: deviceDescName
The device description that you want to use. This is the filename of the descritption file with ".desc.scd" stripped.

DISCUSSION::

code::
//create a virtual nanokontrol
MIDIMKtl.make(\fakeNano, \nanoKONTROL)

//create a gui to control it
MIDIMKtl(\fakeNano).gui

//assign an action
MIDIMKtl(\fakeNano).elements[\sl][0][0].action_({ |elem| elem.value.postln })
::

METHOD::fake

Create a new MKtl using a device description with an automatically generated name.

argument:: deviceDescName
The device description that you want to use. This is the file name of the description file (without .desc.scd), or the long name of the device as reported.

DISCUSSION::

code::
//create a virtual nanokontrol
MIDIMKtl.fake(\nanoKONTROL)
::


METHOD:: addSpec
add a ControlSpec to MKtl's library of specs.

argument:: key
Name of the spec

argument:: spec
The ControlSpec

METHOD:: make
Create a new MKtl using a device description without initializing it. Usefull for testing a controller when it is not connected to the system

argument:: name
name for the new MKtl

argument:: deviceDescName
The device description that you want to use. This is the filename of the descritption file with ".desc.scd" stripped.

DISCUSSION::

code::
//create a virtual nanokontrol
MIDIMKtl.make(\fakeNano, \nanoKONTROL)

//create a gui to control it
MIDIMKtl(\fakeNano).gui

//assign an action
MIDIMKtl(\fakeNano).elements[\sl][0][0].action_({ |elem| elem.value.postln })
::



SUBSECTION:: Private methods

METHOD:: loadAllDescs
load all device description files from the default folder. Done automatically when initializing an MKtl

argument:: reload
force a reload of the device index


METHOD:: postAllDescriptions
Posts all descriptions found in the deviceDescriptionFolder.

METHOD:: initClass

METHOD:: deviceDescriptionFolder
This class variable holds the path where the device descriptions are located. It is automatically inferred from the location where the class is residing on your system.


METHOD:: allDevDescs
An IdentityDictionary holding all known device specs. These are read files in deviceDescriptionFolder.


METHOD:: specs
All the ControlSpecs used by controller elements.


METHOD:: allAvailable
List of available controllers (by name) per protocol.


METHOD:: makeShortName
Convenience method to make a short name from a long name given by the controller.

argument:: deviceID
The long name given by the controller.

returns:: the short name

METHOD:: basicNew
This is the basic method to create a new MKtl, which is called by the subclasses to do the basic initialisation of the MKtl.

argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the new method will return that instance (a la Ndef proxy style).

argument:: deviceDescName
The device description that you want to use. This is the name used in the device description index, or the long name of the device as reported.

returns:: the instance of MKtl that is created.



METHOD:: checkName
Checks whether you are trying to make a new instance of MKtl with a specific deviceDescName with a name that is already in use.

argument:: name
The name of the controller as you want to refer to it.

argument:: deviceDescName
The device description that you want to use.

returns:: true if the name is already taken, false if the name is not taken, or if you did not specify a deviceDescName

METHOD:: getDeviceDescription
Try to find a fitting device description.

argument:: devName
Name of the device description, or name of the controller name given.

returns:: a device description.

METHOD:: flattenDescription
flattens a device description based on which platform the code is currently running.

argument:: devDesc
The description to flatten

returns:: the flattened description.

PRIVATE::exploring,flattenDescriptionForIO, initClass, prMakeVirtual

INSTANCEMETHODS::

METHOD:: name
retrieve the name of the MKtl.


METHOD:: elements
all control elements (MKtlElement) on the device you may want to listen or talk to. this returns a dictionary containing

METHOD:: elementAt
Access an element in the elements hierarchy by passing in the indexes to arrays/dictionaries as arguments of elementAt:

discussion::

code::
myKtl.elementAt(\sl,0,0)

//the same as

myKtl.elements[\sl][0][0]
::


METHOD:: gui

Create a gui representation of the device

discussion::

MIDIMKtl.make(\test,\nanoKONTROL).gui



METHOD:: elementsNotOfType

discussion::

code::
(
k = MIDIMKtl.fake(\nanoKONTROL);
k.elementsNotOfType(\slider)
)
::

METHOD:: elementsOfType

discussion::

code::
(
k = MIDIMKtl.fake(\nanoKONTROL);
k.elementsOfType(\slider)
)
::

METHOD:: explore

When a device doesn't yet have a description file, this can be used to help in creating one.



SUBSECTION:: Private methods

METHOD:: postDeviceDescription

dump device description

METHOD:: allElements

returns:: an array with all the elements

METHOD:: loadDeviceDescription
Load a device description from either a given device description name, or a device name.
Also creates the specs for them.

argument:: deviceName
a given device description name, or a device name.

METHOD:: deviceDescription
The device description of the MKtl.

METHOD:: init
Initializes the MKtl with its name, elements and puts it in all.

argument:: argName
name of the MKtl

argument:: deviceDescName
deviceDescName of the MKtl


METHOD:: makeElements
Populate the elements with MKtlElements.


PRIVATE:: storeArgs, printOn, elementNames, elementDescriptionFor, deviceDescriptionHierarch, defaultValueFor, prUnderscorify, replaceElements, prTraverse, makeElementName, makeFlatDeviceDescription



