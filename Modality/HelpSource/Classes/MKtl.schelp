CLASS:: MKtl
summary:: A class for creating and accessing external controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/PKtl, Classes/MKtlElement

DESCRIPTION::
MKtl provides an easy to use interface for devices you can connect to your computer through MIDI, HID, OSC, Serial and eventually other protocols. Beyond that, you will be able to use it for GUI based controllers (yet to be implemented).

MKtl searches for controllers connected to your machine, and gives you a list of available devices. Or, if you already know which controller you want to use, it will look through this list and returns you the controller with that name. If it cannot find it, it will replace it with a graphical representation of the controller to simulate it.

For most devices, this requires that someone has already made a description file for the device; if there is none, it is easy to make one following the instructions here:
link::Tutorials/How_to_create_a_description_file::

CLASSMETHODS::

METHOD:: all
all open MKtl controllers.

METHOD:: find
Find all currently connected controllers.
This method calls the find method on all of MKtl's subclasses.
code::
MKtl.find;
::

METHOD:: new
Creates a new instance of MKtl, or accesses an existing instance with that name.
For devices which have descriptions already, this works by using the shortname given by *find.
argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the method will return that instance, as with e.g. JITLib proxies, oder OSCdef, MIDIdef etc.

argument:: deviceDescName
The device description that you want to use. This is the file name of the description file (without .desc.scd), or the long name of the device as reported.

code::
MKtl.find;
// use auto-name, assuming you have one nanoKontrol 2 connected.
// if you have not, a virtual nanoKontrol2 will be generated
k = MKtl('nnkn20');
::

METHOD::make

Create a new MKtl using a device description with an automatically generated name.

argument::name
name for the new MKtl
argument:: deviceDescName
The device description that you want to use. This is the file name of the description file (without .desc.scd), or the long name of the device as reported.

code::
//create a virtual nanokontrol
MIDIMKtl.make(\fakeNano, "nanoKONTROL")

//create a gui to control it
MIDIMKtl(\fakeNano).gui

//assign an action
MIDIMKtl(\fakeNano).elements[\sl][0][0].action_({ |elem| elem.value.postln })
::

METHOD::fake

Create a new MKtl using a device description with an automatically generated name.

argument:: deviceDescName
The device description that you want to use. This is the file name of the description file (without .desc.scd), or the long name of the device as reported.

code::
//create a virtual nanokontrol2
MIDIMKtl.fake("nanoKONTROL2");

//create a gui to control it
MIDIMKtl('virtual_0_nanoKONTROL2').gui

//assign an action
MIDIMKtl(\virtual_0_nanoKONTROL2).elements[\sl][0][0].action_({ |elem| elem.value.postln })
::


METHOD:: addSpec
add a ControlSpec to MKtl's library of specs.

argument:: key
Name of the spec

argument:: spec
The ControlSpec


METHOD:: loadMatching
load device description file(s) by matching to a name.

argument:: name
local name by which to match; e.g. "RunNDrive" will find
"RunNDrive_Wireless.desc.scd" in the description folder.

METHOD:: postAllDescriptions
Posts all descriptions found in the deviceDescriptionFolder.

METHOD:: allDescriptions
Return a Dictionary with all open loaded device descriptions.


SUBSECTION:: Private methods

METHOD:: loadAllDescs
load all device description files from the default folder. Done automatically when initializing an MKtl

argument:: reload
flag whether to force a reload of the device description dictionary.

METHOD:: loadSingleDesc
load a single device description file from full path.

METHOD:: initClass

METHOD:: deviceDescriptionFolder
This class variable holds the path where the device descriptions are located. It is automatically inferred from the location where the class is residing on your system.


METHOD:: allDevDescs
An IdentityDictionary holding all known device specs. These are read files in deviceDescriptionFolder.


METHOD:: specs
A global dictionary of all preset ControlSpecs used by various controller elements.

METHOD:: allAvailable
List of available controllers (by name) per protocol.


METHOD:: makeShortName
Convenience method to make a short name from a long name given by the controller.

argument:: deviceID
The long name given by the controller.

returns:: the short name

METHOD:: basicNew
This is the basic method to create a new MKtl, which is called by the subclasses to do the basic initialisation of the MKtl.

argument:: name
The name of the controller as you want to refer to it.
If you supply the short name that was given by MKtl's find method, it will try to open this device.
If you supply the name of an MKtl that already exists, the new method will return that instance (a la Ndef proxy style).

argument:: deviceDescName
The device description that you want to use. This is the name used in the device description index, or the long name of the device as reported.

returns:: the instance of MKtl that is created.



METHOD:: checkName
Checks whether you are trying to make a new instance of MKtl with a specific deviceDescName with a name that is already in use.

argument:: name
The name of the controller as you want to refer to it.

argument:: deviceDescName
The device description that you want to use.

returns:: true if the name is already taken, false if the name is not taken, or if you did not specify a deviceDescName

METHOD:: getDeviceDescription
Try to find a fitting device description.

argument:: devName
Name of the device description, or name of the controller name given.

returns:: a device description.

METHOD:: flattenDescription
flattens a device description based on which platform the code is currently running.

argument:: devDesc
The description to flatten

returns:: the flattened description.

PRIVATE::exploring,flattenDescriptionForIO, initClass, prMakeVirtual

INSTANCEMETHODS::

METHOD:: name
retrieve the name of the MKtl.


METHOD:: elements
all control elements (MKtlElement) on the device you may want to listen or talk to. this returns an link::Classes/MKtlElementDict:: containing a hierarchical tree of link::Classes/MKtlElement::s, organised via MKtlElementDicts and link::Classes/MKtlElementArray::s.

METHOD:: elementAt
Access an element in the elements hierarchy by passing in the indexes to arrays/dictionaries as arguments of elementAt:

discussion::

code::
myKtl.elementAt(\sl,0,0)

//the same as

myKtl.elements[\sl][0][0]
::


METHOD:: gui

Create a gui representation of the device

discussion::

MKtl.make(\test, "nanoKONTROL");
k = MKtl(\test);
k.gui


METHOD:: elementsNotOfType

return all elements that are not of the type given
code::
k.elementsNotOfType(\slider)
::

METHOD:: elementsOfType

return all elements that are of the type given

code::
k.elementsOfType(\slider)
::

METHOD:: explore

When a device doesn't have a description file yet, explore can be used to help in creating one.


SUBSECTION:: Private methods

METHOD:: postDeviceDescription

p device description

METHOD:: allElements

returns an array with all the elements

METHOD:: inputElements

returns an array with all the elements that provide inputs

METHOD:: outputElements

returns an array with all the elements that provide outputs


METHOD:: prLoadDeviceDescription
Load a device description from either a given device description dictionary.
Also creates the specs for them.

argument:: deviceInfo
a given device description name, or a device name.


METHOD:: deviceDescriptionArray
The device description of the MKtl in Array form

METHOD:: deviceDescriptionHierarch
The device description of the MKtl in a hierarchical Dictionary form

METHOD:: init
Initializes the MKtl with its name, elements and puts it in all.

argument:: argName
name of the MKtl

argument:: deviceDesc
either a dictionary with a valid device description, or a name of a device description.


METHOD:: makeElements
Populate the elements with MKtlElements.


PRIVATE:: storeArgs, printOn, elementNames, elementDescriptionFor, deviceDescriptionHierarch, defaultValueFor, prUnderscorify, replaceElements, prTraverse, makeElementName, makeFlatDeviceDescription



