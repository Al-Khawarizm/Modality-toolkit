CLASS:: MDispatch
summary:: Create complex controls from simpler ones
categories:: Modality, Control
related:: Classes/MKtl, Classes/FuncChain, Reference/MDispatch_Templates

DESCRIPTION::
An MDispatch allows to create complex controls from simpler ones. An MDispatch has both a set of inputs (possibly from multiple sources) and a set of outputs. Each MDispatch contains a link::Classes/FuncChain:: which is triggered on an incoming event, and causes every function in the FuncChain to be executed. 
MDispatches can be handwritten or created using a template.

handwritten:

code::
(
//change 'nnkn0' to the MKtl shortname of your controller
MIDIMKtl.find;
k = MKtl('nnkn0');
k.reset;
~dis = MDispatch.new;
//map outputs of MKtl instance to the inputs of the Dispatch
~dis.map(k);	
//create outputs for the Dispatch with the same name as the inputs.
~dis.createOutputsFromInputs;
//only trigger actions if value is 1	
~dis.addToProc( \trigger, { |dis,e|
	var in = ~changedIn;
	if( in[\val] == 1 ) {
		dis.setOutput(in[\key], 1)
	}
});
~dis.verbose = true;
)
::

Using a template:

code::
(
//change 'nnkn0' to the MKtl shortname of your controller
 MIDIMKtl.find;
~dis = MDispatch.make(\velocity, MIDIMKtl('nnkn0').reset );
~dis.verbose = true;
)
::

CLASSMETHODS::
private:: cleanTemplateName, generateTempName, dispatchTemplateFolder, tempNamePrefix, maxTempDefNames, initClass 

METHOD:: new
Returns an empty MDispatch.

argument:: name
name for the new MDispatch

returns:: a MDispatch

METHOD:: make
Makes an MDispatch using a pre-existing template.

code::
//velocity
(
MIDIMKtl('nnkn0').reset;
~dis = MDispatch(\velocity, MIDIMKtl('nnkn0') );
~dis.verbose = true;
)
::

argument:: name
name of template i.e code::\velocity:: or code::"velocity"::

argument::  ... args
arguments for construction of the MDispatch. Will vary according to the template.

returns:: a MDispatch

METHOD:: getMDispatchTemplate
Gets the dictionary that contains the template.

argument:: name
name of the template

returns:: Dictionary

METHOD:: getTemplateFilePath
returns the file path of the template

argument:: templateName

returns:: String

INSTANCEMETHODS::
private::init, value, sourceKeyToSource, mappedElems, changedOuts, prMapSourceToKey, valueArray, processChain, defaultValueFor, prRegisterInputWithSource

METHOD:: verbose
Posts the outgoing values.

METHOD:: name
name of the MDispatch

returns:: String

METHOD:: funcChain
The link::Classes/FuncChain:: that contains the actions to perform.
returns:: FuncChain

METHOD:: elements
An array of link::Classes/MDispatchOut::s. These are the outputs of the Dispatch.

returns:: Array[MDispatchOut]

METHOD:: sources
The inputs of the Dispatch. A Dictionary associating source names, as declared when mapping the source (can be different from the source's own name), with Dictionaries which associate element keys with their corresponding values. Example:
code::
(\myNanoKontro: (\sl1_1:0.2, \sl2_1:0.6), \myLaunchPad: (\bu1:1, \bu2:0) )
::
returns:: Dictionary[sourceName:Symbol,Dictionary[elementKey:Symbol,Any]]

METHOD:: envir
An link::Classses/Event:: which holds the internal variables of the Dispatch. It can be used to hold temporary values or calculations.
 the code::'changedIn':: key holds an event of type code::(source:theSource, key:theKey, value:theValue)::. Each time a new value arrives in one the inputs, each function in the FuncChain will be called. The functions in funcChain can access the input that was changed by getting the variable changedIn.
returns:: Event

METHOD:: changeSource
Changes which actual source is associated with an internal source name. For instance, to change code::\myNanoController:: to be associated with code::MKtl('nnkn1'):: instead of code::MKtl('nnkn0'):: one would do
code::
~disp.changeSource(\myNanoController, MKtl('nnkn1'))
::
.
argument:: sourceKey
The internal name for this source.

argument:: newSource
The new source (i.e. an MKtl or a MDispatch).

METHOD:: map
Creates inputs for all keys in code::elemKeys:: and connects those inputs with the corresponding outputs of the source. If a code::sourceKey:: is given, then it associates the source with this key, otherwise it uses the source's own name). If code::elemKeys:: is nil then it connects the Dispatch with all the outputs of the source.

argument:: source
An MKtl or MDispatch.

argument:: elemKeys
A list of keys corresponding to output elements of the source.

argument:: sourceKey
An internal name to associate with the source.

METHOD:: mapToElem
Creates an input in the Dispatch for a corresponding output of the source. 

argument:: source
An MKtl or MDispatch.

argument:: elemKey
A key corresponding to one output element of the source.

argument:: sourceKey
An internal name to associate with the source.

METHOD:: lookupSources
Gets the internal source names associated with the source. Different controls of the source can be associated with different internal source names:

code::
(
MIDIMKtl.find;
k = MKtl('nnkn0');
d = MDispatch.new;
~sliders =  d.map(k, k.elementsOfType(\slider).collect(_.name) , \nksliders);
~buttons =  d.map(k, k.elementsOfType(\button).collect(_.name) , \nkbuttons);
d.lookupSources(k)
)
d.remove
::

argument:: source
An MKtl or MDispatch.

returns:: Array[Symbol].

METHOD:: setInput
Manually sets the input.

argument:: source
An MKtl or MDispatch.

argument:: elemKey
A key corresponding to one input of the source.

argument:: value
The value to set.

METHOD:: getInput

argument:: sourceKey
The internal source name for the source.

argument:: elemKey
Key corresponding to the input.

returns:: Any

METHOD:: createOutput
Outputs of MDispatch have to first be created before they are used.

argument:: elemkey
Key corresponding to the output.

METHOD:: createOutputsFromInputs
Takes all keys from all elements of all sources and create outputs using those keys. 

METHOD:: getOutput
Returns the current value of the MDispatch corresponding to the code::elemKey::

argument:: elemKey
Key corresponding to the output.

returns:: Any

METHOD:: setOutput
Sets the current value of the MDispatch corresponding to the code::elemKey::.

argument:: elemKey
Key corresponding to the output.


METHOD:: connect
Calls map and then createOutputsFromInputs

argument:: source
An MKtl or MDispatch.

argument:: elemKeys
A list of keys corresponding to output elements of the source.

argument:: sourceKey
An internal name to associate with the source.

argument:: value

METHOD:: addToProc
Adds a function to the link::Classes/FuncChain:: for processing events.

argument:: key
Name for the function.

argument:: func
A link::Classes/Function::.

argument:: addAction
see link::Classes/FuncChain::.

argument:: target
see link::Classes/FuncChain::.

METHOD:: remove
Disconnects all inputs from the corresponding sources. After calling this method the Dispatch will no longer do anything.

METHOD:: recursiveRemove
Disconnects all inputs from the corresponding sources and calls code::remove:: on all sources which are MDispatchs. After calling this method the whole MDispatch chain connected to this MDispatch will no longer do anything.

METHOD:: elementNames
Returns an array with the output names.

returns:: Array[Symbol]

METHOD:: at
Gets output at code::elemKey::.

argument:: elemKey
Key corresponding to the output.

returns:: MDispatchOut

EXAMPLES::
Calculate average between two sliders.

code::
(
MIDIMKtl.find;
a = MKtl('nnkn0');
d = MDispatch.new;

d.mapToElem( a, \sl1_1, \myController1 );
d.mapToElem( a, \sl2_1, \myController1 );

d.createOutput(\average);

d.addToProc( \average, { |dis|
	var val = [\sl1_1,\sl2_1].collect{ |it| 
		dis.getInput( \myController1, it ) 
	}.sum;
	dis.setOutput( \average, val/2 );
} );

d.addFuncElem(\average,\blah,{ |element| postln("average is "++element.value) })
)
::

Paged velocity:
Use the arrow keys to change the scene.
code::
(
MIDIMKtl.find;
MIDIMKtl('nnkn0').reset;
~dis1 = MDispatch.make(\paged, MIDIMKtl('nnkn0'),\rew,\fwd,4);
~dis2 = MDispatch.make(\velocity, ~dis1);
~dis2.verbose = true
)
::