TITLE:: MKtlDesc
summary:: handling descriptions of interface devices in Modality
categories:: Overviews/Modality
related:: Classes/MKtl, Classes/MKtlElement, Classes/MKtlElementGroup



DESCRIPTION::
MKtlDesc can read description files for hardware interface devices from its folder or other folders. It converts them into MKtlDesc objects, which contain general information about the device, and detailed information about all of its interface elements (such as sliders, buttons, joysticks, etc etc). MKtlDescs are used to create MKtls and its elements.

code::
MKtlDesc.folderName;
MKtlDesc.defaultFolder;
MKtlDesc.addFolder("~/scgit/");
MKtlDesc.descFolders;
MKtlDesc.openFolder(0);
MKtlDesc.openFolder(1);

// load all description files
MKtlDesc.loadDescs;
// or matching ones in specific places
MKtlDesc.loadDescs("*nano*");
MKtlDesc.loadDescs("nano*", folderIndex: 0);

MKtlDesc.allDescs;
MKtlDesc.allDescs.choose.dump;
MKtlDesc.at('korg-nanokey2');
MKtlDesc('korg-nanokey2').web;
MKtlDesc.web;

// filename, no extension
MKtlDesc.findFile("*nano*");

x = MKtlDesc.fromFileName("korg-nanopad2");
x.openFile;
x.fullDesc.keys;
x.protocol
x.idInfo
x.fullDesc
x.fullDesc.keys
x.elementsDesc.key;[\padOn];
x.elementsDesc.at(\padOff);

x.postInfo
x.postInfo(postElements: true)

MKtlDesc.findFile("korg-nanopad2");
MKtlDesc.findDict("nanoKEY2");
MKtlDesc.findDict((description: ()));

::


CLASSMETHODS::

PRIVATE:: initClass

METHOD:: defaultFolder
the path where the folder for MKtlDesc files lives.

METHOD:: folderName
the filename of the defaultFolder.

METHOD:: descFolders
all descFolders within which to look for MKtlDesc files.

METHOD:: addFolder
add a folder to descFolders

METHOD:: openFolder
open folder(s) in descFolders by index.

METHOD:: new
create an MKtlDesc with a name, from a well-formed description file.

METHOD:: at
access an MKtlDesc by name in the global repository

METHOD:: fromFileName
create an MKtlDesc from a file.
ARGUMENT:: filename
filename without path or extension, will be looked for in descfolders.

METHOD:: findDict
create an MKtlDesc from a well-formed description dict.

METHOD:: loadDescs
load all descriptions in descFolders.
only used for testing.

METHOD:: allDescs
all currently loaded descs

METHOD:: isValidDescDict
check whether dict is a valid description dict.

METHOD:: findDict
find or create a dict from a symbol (lookup),
a string (load file) or a dict (remains itself).

METHOD:: findFile

INSTANCEMETHODS::

METHOD:: fullDesc
get MKtlDesc's properties, or set them from a dict

METHOD:: path
the path where file was read (if so)

METHOD:: shortName
the autogenerated shortname by which the desc is stored.

METHOD:: writeFile
not done yet - should eventually write a well-formed description file
at path based on its current data.

PRIVATE:: init, storeArgs, printOn

EXAMPLES::

code::
(some example code)
::