TITLE:: MKtlDesc
summary:: objects to store descriptions of MKtls
categories:: Overviews/Modality
related:: Classes/MKtl, Classes/MKtlElement



DESCRIPTION::
MKtlDesc can read files from its folders,
and convert them into MKtlDesc objects.

code::
MKtlDesc.loadAllDescs;
MKtlDesc.allDescs.choose.dump;
MKtlDesc.folderName;
MKtlDesc.defaultFolder;
MKtlDesc.addFolder("~/scgit/");
MKtlDesc.descFolders;

MKtlDesc.openFolder;

// filename, no extension
MKtlDesc.findFile("nano*");
MKtlDesc.findFile("nanoKEY2");
MKtlDesc.makeShortName("nanoKEY2");

x = MKtlDesc.fromFile("nanoKEY2");
MKtlDesc.allDescs;
MKtlDesc.at('nnky2');
x.openFile;

x.descDict.keys
x.protocol
x.device
x.desc
x.desc.keys
x.desc.at(\mod);
x.desc.at(\keyOff);

x.postInfo(elements: true)
x.postElementInfo

MKtlDesc.findDict('nnky2');
MKtlDesc.findDict("nanoKEY2");
MKtlDesc.findDict((description: ()));


::


CLASSMETHODS::

PRIVATE:: initClass

METHOD:: defaultFolder
the path where the folder for MKtlDesc files live.

METHOD:: folderName
the filename of the defaultFolder.

METHOD:: descFolders
all descFolders within which to look for MKtlDesc files.

METHOD:: addFolder
add a folder to descFolders


METHOD:: fromFile
create an MKtlDesc from a file.
ARGUMENT:: filename
filename without path or extension, will be looked for in

METHOD:: new
create an MKtlDesc from a well-formed description dictionary.
argument:: desc

METHOD:: at
access an MKtlDesc by name in the global repository


METHOD:: writeFile
will eventually write a well-formed description file
based on current MKtlDesc data.

METHOD:: makeShortName
convert any string to a short name

METHOD:: findDict


ARGUMENT:: symbolStringOrDict




METHOD:: isValidDescDict


ARGUMENT:: dict








METHOD:: findFile


ARGUMENT:: filename




METHOD:: loadAllDescs

METHOD:: allDescs

METHOD:: fromDict

INSTANCEMETHODS::

METHOD:: descDict

ARGUMENT:: dict




METHOD:: path




METHOD:: shortName




METHOD:: storeArgs




METHOD:: printOn


ARGUMENT:: stream




METHOD:: init





EXAMPLES::

code::
(some example code)
::