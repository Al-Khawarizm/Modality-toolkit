TITLE::MPush2
SUMMARY::Helper methods to interface with the Ableton Push 2
CATEGORIES::Libraries/Modality
RELATED:: Overviews/Modality, Classes/MKtl, Classes/MPush

DESCRIPTION::
MKtl class that simplifies interfacing the Ableton Push 2 controller.
It inherits all its functionality from link::Classes/MPush:: and link::Classes/MKtl::.

Currently only implements an interface to set color LEDs.

note::
Currently no support for the display.
::



Examples::

code::
// create Mktl for the Push controller, it has two ports, the 2nd one is the "default"

// make sure, ableton is not running (it grabs the device)
k = MPush2('push');


k.trace(true);
// wiggle some pots / buttons

k.trace(false);


k.elAt(\pad, \8, \1); // symbols represent button names (typically starting at 1), integers are indices (starting at 0)

// set an action to post aftertouch values
k.elAt(\pad, \8, \1).action = {|el|
	el.value.postln;
}

// remove action
k.elAt(\pad, \8, \1).action= nil;


// on-action:

k.elAt(\pad, \8, \1, \on).action = {|el|
	"on:\t%".format(el.value).postln
}

// off-action:

k.elAt(\pad, \8, \1, \off).action = {|el|
	"off:\t%".format(el.value).postln
}

// set lights
k.setPadLight(k.elAt(\pad, \8, \1, \on), \green);
k.setBtLight(k.elementAt(\bt, 0, 0), \green);
k.setBtLight(k.elementAt(\bt, 1, 0), \blue);
k.setCtlLight(k.elementAt(\btCtl), blink: \slow);
k.setCtlLight(k.elementAt(\btCtl), blink: \steady);

// turn off all lights
k.lightsOff
::