TITLE:: OSCMon
summary:: A Monitor for OSC traffic
categories:: Modality, OSC
related:: Classes/OSCFunc, Classes/OSCdef

DESCRIPTION::
OSCMon monitors captures incoming OSC messages, keeping recent ones around for analyis and display. It can show the  message sizes, relative arrival times for multiple sources.

code::


o = OSCMon.new; 	// make one
o.enable;			// turn it on
o.show;				// show them on gui, no po
o.watchStatus = true; s.boot;

o.verbose = true;	// post messages
// show status messages from server too
o.watchStatus = false;
o.list.size;
o.anaDict.nicknames.as(Event);
o.addresses;
(
n = NetAddr.localAddr;
Tdef(\test, {
	loop {
		(exprand(0.03, 0.3) * 3).wait;
		n.sendMsg([\test, \yo, \mama].choose,
			*{ 10.rand }.dup(rrand(3, 10)));
	};
});
Tdef(\test).play;
)

o.anaDict[\nicknames];
o.anaDict[\messagesByAddr];
o.anaDict[\msgNamesByAddr];


o.timeWindow = 25;

o.verbose = false; 	// no posting
o.postInfo;			// and post current state

o.disable;
o.enable;
o.list;



o.anaDict[\nicknames];
o.anaDict[\messagesByAddr];
o.anaDict[\msgNamesByAddr];

o.addNickname(\manta, NetAddr("127.0.0.1", 8000));

o.anaDict[\messagesByAddr][\homeclient];

// make a local net address to send/receive messages to monitor;
(
n = NetAddr.localAddr;
Tdef(\test, {
	loop {
		(exprand(0.03, 0.3) * 3).wait;
		n.sendMsg([\test, \yo, \mama].choose,
			*{ 10.rand }.dup(rrand(3, 10)));
	};
});
Tdef(\test).play;
)
	// addresses and msgNames are kept
o.addresses;
o.msgNames;
o.list.keep(10).postln;
	// TBD: statistics on who sent how much
	// which messages are most frequent

	// add nicknames for known addresses
	// post all messages by source
	// post all messages by name and/or source

o.free;

::

CLASSMETHODS::

METHOD:: colors
(describe method here)

returns:: (describe returnvalue here)

METHOD:: prepColors
(describe method here)

returns:: (describe returnvalue here)

METHOD:: new
(describe method here)

ARGUMENT:: bufsize
(describe argument here)

ARGUMENT:: timeWindow
(describe argument here)

ARGUMENT:: action
(describe argument here)

returns:: (describe returnvalue here)


INSTANCEMETHODS::

METHOD:: verbose
(describe method here)

returns:: (describe returnvalue here)

METHOD:: timeWindow
(describe method here)

returns:: (describe returnvalue here)

METHOD:: refreshAddrsAndNames
(describe method here)

returns:: (describe returnvalue here)

METHOD:: addresses
(describe method here)

returns:: (describe returnvalue here)

METHOD:: free
(describe method here)

returns:: (describe returnvalue here)

METHOD:: msgNames
(describe method here)

returns:: (describe returnvalue here)

METHOD:: func
(describe method here)

returns:: (describe returnvalue here)

METHOD:: enabled
(describe method here)

returns:: (describe returnvalue here)

METHOD:: enable
(describe method here)

returns:: (describe returnvalue here)

METHOD:: refresh
(describe method here)

returns:: (describe returnvalue here)

METHOD:: clearMsgNames
(describe method here)

returns:: (describe returnvalue here)

METHOD:: bufsize
(describe method here)

returns:: (describe returnvalue here)

METHOD:: watchStatus
(describe method here)

returns:: (describe returnvalue here)

METHOD:: w
(describe method here)

returns:: (describe returnvalue here)

METHOD:: trackMsgs
(describe method here)

returns:: (describe returnvalue here)

METHOD:: removeMsgName
(describe method here)

ARGUMENT:: name
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: removeAddr
(describe method here)

ARGUMENT:: addr
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: u
(describe method here)

returns:: (describe returnvalue here)

METHOD:: clearAddrs
(describe method here)

returns:: (describe returnvalue here)

METHOD:: trackAddrs
(describe method here)

returns:: (describe returnvalue here)

METHOD:: addToList
(describe method here)

ARGUMENT:: arr
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: disable
(describe method here)

returns:: (describe returnvalue here)

METHOD:: addMsgName
(describe method here)

ARGUMENT:: name
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: list
(describe method here)

returns:: (describe returnvalue here)

METHOD:: init
(describe method here)

ARGUMENT:: argAction
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: postInfo
(describe method here)

returns:: (describe returnvalue here)

METHOD:: show
(describe method here)

ARGUMENT:: name
(describe argument here)

ARGUMENT:: bounds
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: action
(describe method here)

returns:: (describe returnvalue here)

METHOD:: addAddr
(describe method here)

ARGUMENT:: addr
(describe argument here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::