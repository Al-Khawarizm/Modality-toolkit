
TITLE:: OSCExplorer
summary:: collect incoming messages for device descriptions.
categories:: Undocumented classes
related:: Classes/HIDExplorer, Classes/MIDIExplorer, Reference/Modality, etc.

DESCRIPTION::
OSCExplorer collects incoming OSC messages, so one can create
Modality-style description files from them.

code::

// this gets the info from ifconfig:
z = OSCExplorer.getMyIPs.postcs;
// and that is usually two addresses:
// an internal one, and the one from the current wlan.
a = z.collect { |hostname| NetAddr(hostname, NetAddr.langPort) };

// trace just posts
OSCExplorer.trace;
a[0].sendMsg("/yo", 123, 456);
a[1].sendMsg("/pow", 123, 456);
OSCExplorer.trace(false);

// explore keeps one sample message each from each senderAddr
OSCExplorer.explore;
a[0].sendMsg("/yo", 123, 456);
a[0].sendMsg("/man", 123, 456);
a[1].sendMsg("/pow", 123, 456);
a[1].sendMsg("/wop", 123, 456);
OSCExplorer.explore(false);

OSCExplorer.allSrcDict;
OSCExplorer.allSrcDict.keys.postcs;

// several ways to add a name for each source
// by key as it is in allSrcDict:
OSCExplorer.dictStr('127.0.0.1_57120');
OSCExplorer.allStr;

// by NetAddr:
OSCExplorer.addName('sclang-local', NetAddr.localAddr);
OSCExplorer.allStr;

// by hostname string:
OSCExplorer.addName('sclang-local', "127.0.0.1");

// enter your local wlan IP here
OSCExplorer.addName('sclang-wlan', NetAddr("192.168.178.70", 57120));
OSCExplorer.allStr;

// by just portname
OSCExplorer.addName('likely more than one', 57120);
// and see it fail
OSCExplorer.addName('likely not there', 12345);

(
// make a window to display the info string:
w = Window(OSCExplorer.name).front;
VLayout(t = TextView(w, w.bounds.moveTo(0,0)).resize_(5));
t.string = OSCExplorer.allStr;
)
::



CLASSMETHODS::

METHOD:: getMyIPs
collect all active IP addresses for the computer.
(uses unixCmd ifconfig)

METHOD:: trace
turn tracing incoming messages on and off.

METHOD:: explore
turn on collecting source addresses and message names.

METHOD:: funcChain
a funcChain that will inserted into Main.rec

METHOD:: value
calls funcChain.value(...args).

METHOD:: start
start OSCExplorer, so it can trace or explore.

METHOD:: stop
stop trace and explore
ARGUMENT:: force
if false, stop if no active methods anymore; else, just stop.

METHOD:: dictStr
create a postable string for all messages of selected source.

METHOD:: allStr
create a postable string for all found sources and messages.

METHOD:: allSrcDict
dict where all sources and their info is collected

METHOD:: addName
add a name to a found source

ARGUMENT:: name
the name to add

ARGUMENT:: addrItem
a port number, a NetAddr, or a symbol for the key in allSrcDict


private:: initClass, collect
