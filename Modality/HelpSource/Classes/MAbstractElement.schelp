CLASS:: MAbstractElement
summary:: Base class for MKtl controller elements and MDispatchOut elements.
categories:: Libraries>Modality, Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement, Classes/MDispatchOut

DESCRIPTION::
Abstract class for MKtl controller elements and code::MDispatchOut::s.

note::this is a core and abstract class that sould, in normal usage, not be accessed directly.::

CLASSMETHODS::

METHOD:: new
create a new instance.

argument:: source
the MKtl/Dispatch it belongs to.

argument:: name
a name.


INSTANCEMETHODS::

method:: source
the MKtl/Dispatch it belongs to.

METHOD:: name
name

METHOD:: type
type of the element, e.g. code:: \button, \slider, \knob::. 
See link::Reference/MKtl_description_files:: for a more detailed list.


private:: init

METHOD:: reset
reset element to neutral state, without any functionality.

SUBSECTION:: setting and getting values

METHOD:: value
Setting does not evaluate any action

argument:: newval
the new value

returns:: the current value

METHOD:: prevValue
the previous value

METHOD:: valueAction
set value and evaluate assotiated FuncChain.

argument:: newval
the new value

METHOD:: doAction
Evaluate assotiated FuncChain

METHOD:: funcChain
The Link::Classes/FuncChain:: containing all functionality evaluated everytime a link::#-valueAction:: is set.


SUBSECTION:: Adding and removing functionality

METHOD:: addFuncFirst
Add a function to the link::Classes/FuncChain:: such that it is evaluated first.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.

METHOD:: addFuncLast
Add a function to the link::Classes/FuncChain:: such that it is evaluated last.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.



METHOD:: addFuncAfter
Add a function to the link::Classes/FuncChain:: such that it is evaluated after the given function.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.

argument:: otherName
Name of the function after which this function should be stored.




METHOD:: addFuncBefore
Add a function to the link::Classes/FuncChain:: such that it is evaluated before the given function.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.

argument:: otherName
Name of the function before which this function should be stored.


METHOD:: replaceFunc
Replace a function in the link::Classes/FuncChain::.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.

argument:: otherName
Name of the function to be replaced.


METHOD:: removeFunc
Remove the function in the link::Classes/FuncChain::.

argument:: funcName
The name of the function.

METHOD:: addFunc
Add a function to the link::Classes/FuncChain::.

argument:: funcName
The name, the function should be stored in.

argument:: function
The function. It is called with this instance as its only argument.

argument:: addAction
an identifier for the storing strategy. valid addActions are: 
code::
\addLast, \addFirst, \addBefore, \addAfter, \replaceAt
::

argument:: otherName
Name of the other function.

discussion::
By default, adds the action to the end of the list.



SUBSECTION:: UGen support

METHOD:: kr
Use the value directly on the server.

argument:: server
optional argument that you only have to set once, and only if the server for the bus is not link::Classes/Server#-default::. 

returns:: an link::Classes/In#-kr:: holding the current value of this element. Reflects changes of the value.


private:: updateValueOnServer

METHOD:: initBus
initialize the bus on the server.

argument:: server
The server the bus should be instantiated on.
Default value is link::Classes/Server#-default::.

METHOD:: freeBus
frees the bus.

METHOD:: bus
A link::Classes/Bus:: that holds the element's value.

discussion::
Normally, you should just reference to this bus via the link::#-kr:: which will also take care of creating the bus when needed.

