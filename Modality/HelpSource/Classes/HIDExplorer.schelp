TITLE:: HIDExplorer
summary:: Helper class to explore an HID device for the Modality toolkit
categories:: Libraries>Modality
related:: Overviews/Modality, Reference/MKtl_description_files, Classes/MIDIExplorer

DESCRIPTION::
This helper class helps you to create an HID description file.

code::
// open an HID device
MKtl( 'x', "*drive" );
// create a desc file doc from what HID reports
MKtl( 'x' ).createDescriptionFile;

// or by observation:
HIDExplorer.start(MKtl( 'x' ).device.source);
// ... now move all controllers thru their full range ...

// then do:
HIDExplorer.stop(MKtl( 'x' ).device.source);
MKtl( 'x' ).device.openDoc;
::


The file will have lines like this:

code::
// --------- input elements ----------
'<element name b1>': ('hidUsage': 1, 'hidUsagePage': 9, 'type': '<type Button>', 'ioType': 'in' ),
::

Here you give a proper name to: code::'<element name b1>':: to e.g. code::'b1'::, based on the number that is written on the button - this is the name that will be used to refer to the element.

Then you also need to edit the type: code::'<type Button>':: to code::'button'::, and similar for other element types - see other HID device files for examples.

The other parts on the lines you should not change.

Check link::Reference/MKtl_description_files:: for the format of the description files.



CLASSMETHODS::

private:: compileFromDevice, openDocFromDevice, compileFromObservation

METHOD:: start, stop
start abd stop observing an HID device

METHOD:: openDoc
open a document of the currently observed data, optionally including parameter specs.

METHOD:: verbose
get and set flag whether to post info
METHOD:: trace
get and set flag whether to post tracing info, default flag is true



private:: allMsgTypes, detectDuplicateElements, exploreFunction, observeDict, observedSrcDev, prepareObserve, resps, results, specMap, stringFor, updateRange
