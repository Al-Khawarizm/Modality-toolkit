title:: Creating Presets for MKtl Element Values
summary:: store sets of element values as state, and reuse them later
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement

MKtl has simple ways to get and set multiple element values at once.
This functionality can be use to create simple presets of sets of MKtl element values to set them to desired states.

code::
// make an MKtl
g = MKtl(\gp, "*run*drive");
g.gui;
// get current settings of all controllers:
~pre0 = g.getKeysValues;

// get some values only by name:
g.getKeysValues([\joy_l_x, \joy_l_y]);

// create sets of names to use in preset
~joyKeys = g.elementAt(\joy).flat.collect(_.name);
~butKeys = g.elementAt(\bt).collect(_.name);


// create some random settings:
g.elementsDict.do(_.value_(1.0.rand));
~rnd1 = g.getKeysValues;
g.elementsDict.do(_.value_(1.0.rand));
~rnd2 = g.getKeysValues;

// make random settings for smaller sets of keys only
~joyKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
~rndJoy1 = g.getKeysValues(~joyKeys);

~butKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
~rndBut1 = g.getKeysValues(~butKeys);

// restore to initial setting
g.setKeysValues(~pre0);

// give all elements an action,
// then set states with doAction
g.elementGroup.action_ { |el| "YO: % %\n".postf(el.name, el.value) };

// set to one of them
g.setKVAction([~pre0, ~rnd1, ~rnd2, ~rndBut1, ~rndJoy1].choose);
::
